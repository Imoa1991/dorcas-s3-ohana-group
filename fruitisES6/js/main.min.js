'use strict';
const nameCard = document.querySelector('.fill__input-name');
const nameInput = document.querySelector('.fill__input-job');

const writeData = (event) => {
  const guiltyElement = event.currentTarget;
  const targetID = guiltyElement.getAttribute('data-info');
  document.querySelector('#' + targetID).innerHTML = guiltyElement.value;
};
nameCard.addEventListener('keyup', writeData);
nameInput.addEventListener('keyup', writeData);

'use strict';

const fr = new FileReader();
const buttonImage = document.querySelector('.fill__input--addimgbutton');
const inputHidden = document.querySelector('#img-selector');
const imageCard = document.querySelector('.viewfinder__photo');
const miniImage = document.querySelector('.fill__input--miniimg');
let urlPhoto;
let miniPhoto;

const getImage = (event) => {
  const myFile = event.currentTarget.files[0];
  fr.addEventListener('load', writeImage);
  fr.readAsDataURL(myFile);
};

const writeImage = () => {
  urlPhoto = 'url(' + fr.result + ')';
  miniPhoto = 'url(' + fr.result + ')';
  imageCard.style.backgroundImage = 'url(' + fr.result + ')';
  miniImage.style.backgroundImage = 'url(' + fr.result + ')';
  // guardarCardLocal();
};

const fakeFileClick = () => {
  inputHidden.click();
};

inputHidden.addEventListener('change', getImage);
buttonImage.addEventListener('click', fakeFileClick);

'use strict';

const collapsible = document.querySelectorAll('.collapsible');
const collapsibleTriggers = document.querySelectorAll('.collapsible__label');

const closeAllCollapsibles = () => {
  for (const close of collapsible) {
    close.classList.remove('collapsible--visible');
  }
};

for (const trigger of collapsibleTriggers) {
  trigger.addEventListener('click', (evento) => {
    const parent = evento.currentTarget.parentElement.parentElement;

    if (parent.classList.contains('collapsible--visible')) {
      parent.classList.remove('collapsible--visible');
    } else {
      closeAllCollapsibles();
      parent.classList.add('collapsible--visible');
    }
  });
}


'use strict';
const cardContainer = document.querySelector('.viewfinder');
const radioRed = document.querySelector('.radio--red');
const radioGrey = document.querySelector('.radio--grey');
const radios = document.querySelectorAll('.radio');
const radioComic = document.querySelector('.radio--comic');
const radioMontserrat = document.querySelector('.radio--montserrat');
const init = () => {
  for(const element of radios) {
    element.addEventListener('click', setStyles);
  }
};
const setStyles = () => {
  resetColor();
  if (radioRed.checked) {
    cardContainer.classList.add('viewfinder--red');
  } else if (radioGrey.checked) {
    cardContainer.classList.add('viewfinder--grey');
  } else {
    cardContainer.classList.add('viewfinder--blue');
  }
  if (radioComic.checked) {
    cardContainer.classList.add('comic');
  } else if (radioMontserrat.checked) {
    cardContainer.classList.add('montserrat');
  } else {
    cardContainer.classList.add('ubuntu');
  }
};
const resetColor = () => {
  cardContainer.classList.remove('viewfinder--red', 'viewfinder--grey', 'viewfinder--blue', 'comic', 'montserrat', 'ubuntu');
};
init();

// 'use strict';
//
// //localStorage.removeItem('Card');
// var localCard ={
//   palette:'',
//   typography:'',
//   name:'',
//   job:'',
//   email:'',
//   phone:'',
//   linkedin:'',
//   github:'',
//   photo:'',
//   skills:[]
// };
// //var buttonChecked=[];
// var buttonsColors=document.getElementsByName('colors');
// var buttonsText=document.getElementsByName('fonts');
// var imgInput = document.querySelector('#img-selector');
// var fr = new FileReader();
// var nameCard=document.querySelector('#element-name');
// var jobCard=document.querySelector('#element-job');
// var mailInputCard = document.querySelector('.fill__input-mail');
// var phoneInputCard = document.querySelector('.fill__input-phone');
// var linkedinInputCard = document.querySelector('.fill__input-linkedin');
// var githubInputCard = document.querySelector('.fill__input-github');
// var nameInputLocal=document.querySelector('.fill__input-name');
// var jobInputLocal=document.querySelector('.fill__input-job');
//
// var miniImage=document.querySelector('.fill__input--miniimg');
// var emailInputLocal=document.querySelector('.fill__input-mail');
// var telInputLocal=document.querySelector('.fill__input-phone');
// var linkdinInputLocal=document.querySelector('.fill__input-linkedin');
// var githubInputLocal=document.querySelector('.fill__input-github');
// //buttonsColors.addEventListener('change',guardarRadios);
// //buttonsText.addEventListener('change',guardarRadios);
//
// nameInputLocal.addEventListener('keyup',guardarCardLocal);
// jobInputLocal.addEventListener('keyup',guardarCardLocal);
// emailInputLocal.addEventListener('keyup',guardarCardLocal);
// telInputLocal.addEventListener('keyup',guardarCardLocal);
// linkdinInputLocal.addEventListener('keyup',guardarCardLocal);
// githubInputLocal.addEventListener('keyup',guardarCardLocal);
//
// //Faltan por poner las Habilidades y la fotos
//
// function guardarCardLocal() {
//   if (!localStorage.getItem('Card')) {
//     localCard ={
//       palette:'',
//       typography:'',
//       name:'',
//       job:'',
//       email:'',
//       phone:'',
//       linkedin:'',
//       github:'',
//       photo:'',
//       skills:[]
//     };
//   }else{
//     localCard = JSON.parse(localStorage.getItem('Card'));
//   }
//
//   localCard.palette=value;
//   localCard.typography=buttonsText.value;/*ojo que hay que hacer el for para saber el value*/
//   localCard.name = nameInputLocal.value;
//   localCard.job = jobInputLocal.value;
//   localCard.email=emailInputLocal.value;
//   localCard.phone=telInputLocal.value;
//   localCard.linkedin=linkdinInputLocal.value;
//   localCard.github =githubInputLocal.value;
//   localCard.photo = urlPhoto;/*mirar como conseguir la url*/
//   localCard.phonoMini=miniPhoto;
//   localCard.email = emailInputLocal.value;
//   localCard.phone = telInputLocal.value;
//   localCard.linkedin = linkdinInputLocal.value;
//   localCard.github = githubInputLocal.value;
//   localStorage.setItem('Card', JSON.stringify(localCard));
//
// }
// function recuperarLocalCard() {
//   localCard = JSON.parse(localStorage.getItem('Card'));
//   recuperarButton();
//   nameCard.innerHTML=localCard.name;
//   jobCard.innerHTML=localCard.job;
//   nameInputLocal.value = localCard.name;
//   jobInputLocal.value = localCard.job;
//   imageCard.style.backgroundImage =localCard.photo;
//   miniImage.style.backgroundImage=localCard.phonoMini;
//   emailInputLocal.value=localCard.email;
//   mailInputCard.href='mailto:'+localCard.email;
//   emailInputLocal.value = localCard.email;
//   phoneInputCard.href='tel: +34' +localCard.phone;
//   telInputLocal.value = localCard.phone;
//   linkedinInputCard.href='https://www.linkedin.com/in/' +localCard.linkedin;
//   linkdinInputLocal.value = localCard.linkedin;
//   githubInputCard.href='https://github.com/' +localCard.github;
//   githubInputLocal.value = localCard.github;
//
//   //miniBox.style.backgroundImage = localCard.foto;
//   //profileImage.value = localCard.foto;
//
// }
// recuperarLocalCard();
//
// var radiosG = document.querySelectorAll('.radiosGroup');
// var rad = document.querySelectorAll('.radio');
// var value;
// for(var i = 0; i < radiosG.length; i++) {
//   rad[i].addEventListener('change', valorButonRadio);
// }
// function valorButonRadio() {
//
//   //bottonColors=getPaletteValue();
//   //console.log(bottonColors);
//   for(var i = 0; i < rad.length; i++) {
//     if (rad[i].checked) {
//       value = rad[i].value;
//       break;
//     }
//   }
//   guardarCardLocal();
// }
// function recuperarButton() {
//
//   var butonpaleta=parseInt(localCard.palette);
//   if(butonpaleta===1){
//     document.getElementById('blue').click();
//   }else if(butonpaleta===2){
//     document.getElementById('red').click();
//   }else if (butonpaleta===3){
//     document.getElementById('grey').click();
//   }
// }
'use strict';

const buttonReset = document.querySelector('.viewfinder__button-reset');

const resetName = document.getElementById('element-name');
const resetJob = document.getElementById('element-job');
const resetPhoto = document.querySelector('.viewfinder__photo');
const resetMiniPhoto = document.querySelector('.fill__input--miniimg');
const resetColor2 = document.getElementById('viewfinder-id');
const resetFont = document.getElementById('viewfinder-id');
const resetTelefon = document.getElementById('element-phone');
const resetMail = document.getElementById('element-mail');
const resetLinkedin = document.getElementById('element-linkedin');
const resetGithub = document.getElementById('element-linkedin');
const resetAbility = document.querySelectorAll('.skilltext');


const resetForm = () => {
  document.querySelector('.main__form').reset();
  resetCard();
};

const resetCard = () => {
  resetName.innerHTML = 'Nombre Apellido';
  resetJob.innerHTML = 'Front-end developer';
  // las imagenes de la card y la peque√±a del formulario
  resetPhoto.style.backgroundImage = 'url("/images/9505e9979cf27646de6a871110cde835.jpg")';
  resetMiniPhoto.style.backgroundImage = 'url("http://placehold.it/29x29/ffffff/ffffff") ';
  //  cambiar los colores
  resetColor2.classList.remove('viewfinder--blue', 'viewfinder--red', 'viewfinder--grey');
  resetColor2.classList.add('viewfinder--blue');
  // cambiar las Fuentes
  resetFont.classList.remove('comic', 'ubuntu', 'montserrat');
  resetFont.classList.add('comic');
  // cambiar iconos
  resetTelefon.href = '';
  resetMail.href = '';
  resetLinkedin.href = '';
  resetGithub.href = '';

  // cambiar Habilidades
  for (const ability of resetAbility) {
    ability.innerHTML = '';
  }
};

buttonReset.addEventListener('click', resetForm);

'use strict';

const mailInput = document.querySelector('.fill__input-mail');
const phoneInput = document.querySelector('.fill__input-phone');
const linkedinInput = document.querySelector('.fill__input-linkedin');
const githubInput = document.querySelector('.fill__input-github');

const transferValueToHref = (event) => {
  const guiltyElement = event.currentTarget;
  const targetID = guiltyElement.getAttribute('data-donde');
  const fillHref = document.querySelector('#' + targetID);

  if (guiltyElement.classList.contains('fill__input-mail')) {
    fillHref.href = 'mailto:' + guiltyElement.value;
  } else if (guiltyElement.classList.contains('fill__input-phone')) {
    fillHref.href = 'tel: +34' + guiltyElement.value;
  } else if (guiltyElement.classList.contains('fill__input-linkedin')) {
    fillHref.href = 'https://www.linkedin.com/in/' + guiltyElement.value;
  } else {
    fillHref.href = 'https://github.com/' + guiltyElement.value;
  }
};

mailInput.addEventListener('keyup', transferValueToHref);
phoneInput.addEventListener('keyup', transferValueToHref);
linkedinInput.addEventListener('keyup', transferValueToHref);
githubInput.addEventListener('keyup', transferValueToHref);

'use strict';

const addAbilityButton = document.querySelector('.abilitiesbutton--plusjs');
const removeAbilityButton = document.querySelectorAll('.abilitiesbutton--minusjs');
const fillAbilityBox = document.querySelectorAll('.fill__ability--js');
const abilitiesDropdown = document.querySelectorAll('.abilitiesdropdown--js');


//Esta funci√≥n crea los elementos "option" que van dentro del select


const createOptionForSelect = (text) => {
  const option = document.createElement('option');
  const optionText = document.createTextNode(text);
  option.appendChild(optionText);
  return option;
};


//Esta funci√≥n llama al API y a√±ade las habilidades a cada option

const callAbilitiesAPI = () => {
  const url = 'https://raw.githubusercontent.com/Adalab/dorcas-s2-proyecto-data/master/skills.json';
  fetch(url)
    .then((response) => response.json())
    .then((json) => {
      const abilitiesList = json.skills;
      for (const elementA of abilitiesDropdown) {
        for (const elementB of abilitiesList) {
          const newSkillsOption = createOptionForSelect(elementB);
          elementA.appendChild(newSkillsOption);
        }
      }
    });
};


//Esta funci√≥n hace que se a√±adan la segunda y tercera caja para seleccionar las skills

const addAbility = () => {
  const hiddenAbilityBox = document.querySelectorAll('.fill__ability--jshidden');

  if (hiddenAbilityBox.length === 2) {
    fillAbilityBox[1].classList.remove('fill__ability--jshidden');
  } else if (hiddenAbilityBox.length === 1) {
    fillAbilityBox[2].classList.remove('fill__ability--jshidden');
  }
};

//Esta funci√≥n permite eliminar la segunda y tercera caja de skills

const removeAbility= (event) => {
  const parentBox = event.currentTarget.parentElement;
  parentBox.classList.add('fill__ability--jshidden');
}

//Las llamadas a las funciones anteriores mediante click

addAbilityButton.addEventListener('click', addAbility);
removeAbilityButton[0].addEventListener('click', removeAbility);
removeAbilityButton[1].addEventListener('click', removeAbility);
callAbilitiesAPI();

//De aqu√≠ hacia abajo va la funci√≥n que hace que el valor seleccionado en los select con skills de "rellena" se transfiera al visor de la card, pero no funciona del todo bien...

const transferabilitiesToCard = () => {
  const abilitiesParagraph = document.querySelectorAll('.skilltext');

  for (const element of abilitiesParagraph) {
    const abilitiesFromSelect = document.createTextNode(element.value);
    element.innerHTML = '';
    element.appendChild(abilitiesFromSelect);
  }
};

for (const element of abilitiesDropdown) {
  element.addEventListener('change', transferabilitiesToCard);
}

'use strict';

const photoFileReader = new FileReader();
const buttonCreateCard = document.querySelector('.shares__input--addimgbutton');
const buttonTwitter = document.querySelector('.shares__twitter');
const sharesUrl = document.querySelector('.shares__url');
const loader = document.querySelector('.loader');
const shares = document.querySelector('.shares');
const nameForm = document.querySelector('.fill__input-name');
const jobForm = document.querySelector('.fill__input-job');
const phoneForm = document.querySelector('.fill__input-phone');
const emailForm = document.querySelector('.fill__input-mail');
const linkedinForm = document.querySelector('.fill__input-linkedin');
const githubForm = document.querySelector('.fill__input-github');
const photoForm = document.querySelector('.action__hiddenField');

const getPaletteValue = () => {
  const palettes = document.querySelectorAll('input[name="palette"]');
  let value;
  for (const element of palettes) {
    if (element.checked) {
      value = element.value;
    }
  }
  return parseInt(value);
};

const getTypographyValue = () => {
  let value;
  let typography = document.querySelectorAll('input[name="typography"]');
  for (const element of typography) {
    if (element.checked) {
      value = element.value;
    }
  }
  return parseInt(value);
};

const getSkillsValue = () => {
  let value = [];
  let skills = document.querySelectorAll('.fill__ability--js:not(.fill__ability--jshidden) select');
  for ( const element of skills) {
    value.push(element.value);
  }
  return value;
};

const setCardUrl = (url) => {
  sharesUrl.innerHTML = url;
  sharesUrl.href = url;
  shares.classList.remove('hidden');
};

const fillPhotoFileReader = (event) => {
  let myFile = event.currentTarget.files[0];
  photoFileReader.readAsDataURL(myFile);
};

const shareUrlTwitter = (url) => {
  buttonTwitter.href = 'https://twitter.com/intent/tweet?url=' + url + '&text=Acabo de crear mi tarjeta&hashtags=WomenInTech';
};

const createUrlCard = () => {
  loader.classList.remove('hidden');
  shares.classList.add('hidden');

  fetch('https://us-central1-awesome-cards-cf6f0.cloudfunctions.net/card/', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json; charset=utf-8'
    },
    body: JSON.stringify({
      palette: getPaletteValue(),
      typography: getTypographyValue(),
      name: nameForm.value,
      job: jobForm.value,
      phone: phoneForm.value,
      email: emailForm.value,
      linkedin: linkedinForm.value,
      github: githubForm.value,
      photo: photoFileReader.result,
      skills: getSkillsValue(),
    })
  })
    .then((response) => response.json())
    .then((json) => {
      loader.classList.add('hidden');
      setCardUrl(json.cardURL);
      shareUrlTwitter(json.cardURL);
    });
};

photoForm.addEventListener('change', fillPhotoFileReader);
buttonCreateCard.addEventListener('click', createUrlCard);

//# sourceMappingURL=main.min.js.map
